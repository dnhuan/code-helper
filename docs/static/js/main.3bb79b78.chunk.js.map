{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TextArea","styled","textarea","Controller","div","ControllerChild","App","useState","in","out","lineGap","prefix","suffix","text","setText","updateText","event","value","target","eName","name","console","log","toString","parseInt","isNaN","_text","split","map","t","join","repeat","className","onChange","autoFocus","type","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"w1BAgGA,IAAMA,EAAWC,IAAOC,SAAV,KAKRC,EAAaF,IAAOG,IAAV,KASVC,EAAkBJ,IAAOG,IAAV,KAaNE,EAvHf,WAAgB,IAAD,EACWC,mBAAS,CAC/BC,GAAI,GACJC,IAAK,GACLC,QAAS,IACTC,OAAO,uBACPC,OAAO,QANI,mBACNC,EADM,KACAC,EADA,KAmBb,SAASC,EAAWC,GAClB,IAAIC,EAAQD,EAAME,OAAOD,MACrBE,EAAQH,EAAME,OAAOE,KAIzB,OAHAC,QAAQC,IAAI,MAAOL,EAAMM,YAGjBJ,GACN,IAAK,KACHL,EAAQ,eAAKD,EAAN,eAAaM,EAAQF,KAC5B,MACF,IAAK,YACHA,EAAQO,SAASP,IACL,GAAKQ,MAAMR,MAAQA,EAAQ,KACvCH,EAAQ,eAAKD,EAAN,eAAaM,EAAQF,EAAMM,cAClC,MACF,IAAK,SAGL,IAAK,SACHT,EAAQ,eAAKD,EAAN,eAAaM,EAAQF,KAMhCH,GAAQ,SAACD,GACP,OAAO,eAAKA,EAAZ,CAAkBJ,KApCFiB,EAoCkBb,EAnCnB,KAAba,EAAMlB,GAAkB,GAClBkB,EAAMlB,GAAGmB,MAAM,MACLC,KAAI,SAACC,GACvB,OAAOH,EAAMf,OAASkB,EAAIH,EAAMd,UAEdkB,KAAK,KAAKC,OAAOP,SAASE,EAAMhB,SAAW,OANjE,IAAoBgB,KAwCpB,OACE,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,2CAEF,kBAAChC,EAAD,CACEoB,KAAK,KACLH,MAAOJ,EAAKL,GACZyB,SAAUlB,EACVmB,WAAS,IAEX,kBAAC/B,EAAD,KACE,kBAACE,EAAD,KACE,yCACA,2BACEe,KAAK,SACLH,MAAOJ,EAAKF,OACZsB,SAAUlB,KAGd,kBAACV,EAAD,KACE,yCACA,2BACEe,KAAK,SACLH,MAAOJ,EAAKD,OACZqB,SAAUlB,KAGd,kBAACV,EAAD,KACE,2CACA,2BACEe,KAAK,UACLe,KAAK,SACLlB,MAAOJ,EAAKH,QACZuB,SAAUlB,MAIhB,kBAACf,EAAD,CAAUiB,MAAOJ,EAAKJ,IAAK2B,UAAQ,MC/ErBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.3bb79b78.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\n\nfunction App() {\n  const [text, setText] = useState({\n    in: \"\",\n    out: \"\",\n    lineGap: \"0\",\n    prefix: `System.out.println(\"`,\n    suffix: `\");`,\n  });\n\n  function textParser(_text) {\n    if (_text.in === \"\") return \"\";\n    let raw = _text.in.split(\"\\n\");\n    let preSufAdd = raw.map((t) => {\n      return _text.prefix + t + _text.suffix;\n    });\n    let out = preSufAdd.join(\"\\n\".repeat(parseInt(_text.lineGap) + 1));\n    return out;\n  }\n\n  function updateText(event) {\n    let value = event.target.value;\n    let eName = event.target.name;\n    console.log(\"pre\", value.toString());\n\n    // input validation\n    switch (eName) {\n      case \"in\":\n        setText({ ...text, [eName]: value });\n        break;\n      case \"lineGap\":\n        value = parseInt(value);\n        if (value < 0 || isNaN(value)) value = \"0\";\n        setText({ ...text, [eName]: value.toString() });\n        break;\n      case \"prefix\":\n        setText({ ...text, [eName]: value });\n        break;\n      case \"suffix\":\n        setText({ ...text, [eName]: value });\n        break;\n      default:\n    }\n\n    // Post state update\n    setText((text) => {\n      return { ...text, out: textParser(text) };\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Code Helper</p>\n      </header>\n      <TextArea\n        name=\"in\"\n        value={text.in}\n        onChange={updateText}\n        autoFocus\n      ></TextArea>\n      <Controller>\n        <ControllerChild>\n          <span>Prefix:</span>\n          <input\n            name=\"prefix\"\n            value={text.prefix}\n            onChange={updateText}\n          ></input>\n        </ControllerChild>\n        <ControllerChild>\n          <span>Suffix:</span>\n          <input\n            name=\"suffix\"\n            value={text.suffix}\n            onChange={updateText}\n          ></input>\n        </ControllerChild>\n        <ControllerChild>\n          <span>Line gap:</span>\n          <input\n            name=\"lineGap\"\n            type=\"number\"\n            value={text.lineGap}\n            onChange={updateText}\n          ></input>\n        </ControllerChild>\n      </Controller>\n      <TextArea value={text.out} readOnly></TextArea>\n    </div>\n  );\n}\n\nconst TextArea = styled.textarea`\n  width: 70vw;\n  height: 30vh;\n`;\n\nconst Controller = styled.div`\n  width: 70vw;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-evenly;\n`;\n\nconst ControllerChild = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: row nowrap;\n  justify-content: space-between;\n  align-items: center;\n\n  margin: 5px 20px 0px 20px;\n  input {\n    height: 1rem;\n  }\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}